# -*- coding: utf-8 -*-
"""Practica 1.3_Distancia_Jaccard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QAnFX3ZSWlLKliZMNcwz5ZpkIicRlzJ9
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import xlrd

#importar datos

data = pd.read_csv('/content/drive/MyDrive/ArchivosColab/movie-DB-2000s.csv')
#data.describe()
data.head(10)

#nuevo df para guardar solo los datos númericos de la base de datos iris
w = data
new_data = w[['Title','Genres','Actor1','Actor2','Actor3']].copy()
new_data.head(10)

from jaccard1 import jaccard_distancia

import numpy as np
import pandas as pd


df = new_data
busqueda = input("Busqueda: ")


for index, row in df.iterrows():
    title = row['Title']
    genres = row['Genres']
    actor1 = str(row['Actor1'])
    actor2 = str(row['Actor2'])

    # Crear una lista de las palabras
    w1_title = title.split()
    w1_genres = genres.split()
    w1_actor1 = actor1.split()
    w1_actor2 = actor2.split()
    w2 = busqueda.split()

    # Combinar las palabras
    ww_title = list(set(w1_title + w2))
    ww_genres = list(set(w1_genres + w2))
    ww_actor1 = list(set(w1_actor1 + w2))
    ww_actor2 = list(set(w1_actor2 + w2))

    # Inicializar una matriz de ceros para cada característica
    matrix_title = np.zeros((2, len(ww_title)))
    matrix_genres = np.zeros((2, len(ww_genres)))
    matrix_actor1 = np.zeros((2, len(ww_actor1)))
    matrix_actor2 = np.zeros((2, len(ww_actor2)))

    # Llenar las matrices con 1 si la palabra está presente en la búsqueda o en la característica
    for i, word in enumerate(ww_title):
        if word in w1_title:
            matrix_title[0, i] = 1
        if word in w2:
            matrix_title[1, i] = 1

    for i, word in enumerate(ww_genres):
        if word in w1_genres:
            matrix_genres[0, i] = 1
        if word in w2:
            matrix_genres[1, i] = 1

    for i, word in enumerate(ww_actor1):
        if word in w1_actor1:
            matrix_actor1[0, i] = 1
        if word in w2:
            matrix_actor1[1, i] = 1

    for i, word in enumerate(ww_actor2):
        if word in w1_actor2:
            matrix_actor2[0, i] = 1
        if word in w2:
            matrix_actor2[1, i] = 1

    # Imprimir las matrices para cada característica
    print(f"Matriz de distancia para el título de '{title}' y la búsqueda:")
    print(matrix_title)

    print(f"Matriz de distancia para el género de '{title}' y la búsqueda:")
    print(matrix_genres)

    print(f"Matriz de distancia para el actor1 de '{title}' y la búsqueda:")
    print(matrix_actor1)

    print(f"Matriz de distancia para el actor2 de '{title}' y la búsqueda:")
    print(matrix_actor2)

"""Opción 1"""



import pandas as pd

df = new_data

busqueda = input("Busqueda: ")

print(f"Estos son los resultados para '{busqueda}' \n")

info = []

for index, row in df.iterrows():
    title = row['Title']
    genres = row['Genres']
    actor1 = str(row['Actor1'])
    actor2 = str(row['Actor2'])
    actor3 = str(row['Actor3'])

    distancia_titulo = jaccard_distancia(busqueda, title)
    distancia_genero = jaccard_distancia(busqueda, genres)
    distancia_actor1 = jaccard_distancia(busqueda, actor1)
    distancia_actor2 = jaccard_distancia(busqueda, actor2)
    distancia_actor3 = jaccard_distancia(busqueda, actor3)


    info.append((distancia_titulo, title, genres, actor1, actor2, actor3))
    info.append((distancia_genero, title, genres, actor1, actor2, actor3))
    info.append((distancia_actor1, title, genres, actor1, actor2, actor3))
    info.append((distancia_actor2, title, genres, actor1, actor2, actor3))
    info.append((distancia_actor3, title, genres, actor1, actor2, actor3))



info.sort(reverse=True)


peliculas = set()


contador = 0
for distancia, titulo, genero, actor1, actor2, actor3 in info:
    if titulo not in peliculas:
        distancia = round(distancia, 4)
        print(f"Título: {titulo}")
        print(f"Género: {genero}")
        print(f"Actores: {actor1}, {actor2}, {actor3}")
        print(f"Distancia: {distancia}")
        print()
        peliculas.add(titulo)
        contador += 1

    if contador >= 5:
        break

"""Opción 2 (lo mismo pero sin el input)"""

import pandas as pd

df = new_data

busqueda = "Emma Stone"

print(f"Estos son los resultados para '{busqueda}' \n")

info = []

for index, row in df.iterrows():
    title = row['Title']
    genres = row['Genres']
    actor1 = str(row['Actor1'])
    actor2 = str(row['Actor2'])
    actor3 = str(row['Actor3'])

    distancia_titulo = jaccard_distancia(busqueda, title)
    distancia_genero = jaccard_distancia(busqueda, genres)
    distancia_actor1 = jaccard_distancia(busqueda, actor1)
    distancia_actor2 = jaccard_distancia(busqueda, actor2)
    distancia_actor3 = jaccard_distancia(busqueda, actor3)


    info.append((distancia_titulo, title, genres, actor1, actor2, actor3))
    info.append((distancia_genero, title, genres, actor1, actor2, actor3))
    info.append((distancia_actor1, title, genres, actor1, actor2, actor3))
    info.append((distancia_actor2, title, genres, actor1, actor2, actor3))
    info.append((distancia_actor3, title, genres, actor1, actor2, actor3))



info.sort(reverse=True)


peliculas = set()


contador = 0
for distancia, titulo, genero, actor1, actor2, actor3 in info:
    if titulo not in peliculas:
        distancia = round(distancia, 4)
        print(f"Título: {titulo}")
        print(f"Género: {genero}")
        print(f"Actores: {actor1}, {actor2}, {actor3}")
        print(f"Distancia: {distancia}")
        print()
        peliculas.add(titulo)
        contador += 1

    if contador >= 5:
        break